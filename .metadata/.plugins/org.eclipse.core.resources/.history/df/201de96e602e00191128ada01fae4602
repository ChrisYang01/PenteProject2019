import java.util.Arrays;

public class SortingHat {

	public static void main(String[] args) {
		
		
	}
	
	int numList[] = {1,3,5,7,9,11,13,15,17}{;
	MergeSortNR ms = new MergeSortNR(num)
		ms.merge90,5,6,num.List
		
	}

}
		// TODO Auto-generated method stub
		
//		int howMany = 15;
//		
//		//int [] nums = getRandom(howMany);
//		int [ ] nums0 = getAscendingOrder(howMany);
//		int [ ] nums1 = getDescendingOrder(howMany);
//		int [ ] nums2 = getRandom(howMany);
//		
//		
//		InsertionSort inS = new InsertionSort(nums0, "Insertion Sort Best");
//		System.out.println(inS);
//		doTiming(inS);
//		System.out.println();
//		InsertionSort inSW = new InsertionSort(nums1, "Insertion Sort Worst");
//		System.out.println(inSW);
//		doTiming(inS);
//		
//		
//	
//		
//		System.out.println(Arrays.toString(nums0));
//		System.out.println(Arrays.toString(nums1));
//	
//		
//
//		SelectionSort sSort = new SelectionSort(nums0, "Selection Sort");
//		
//		doTiming(sSort);
//		System.out.println(sSort);
//		
//		BubblesSort bSort = new BubblesSort(nums1, "Bubbles Sort");
//		
//		doTiming(bSort);
//		System.out.println(bSort);
//		
//	}
//		
//		
//		//sSort.executeAlgorithm();
//		
//	public static void doTiming(BubbleSort s) {
//		
//		
//		long start = System.currentTimeMillis();
//		long start2 = System.nanoTime();
//		
//		s.executeAlgorithm();
////		
//		
//		long end = System.currentTimeMillis();
//		long end2 = System.nanoTime();
//		
//		long theTime = end-start;
//		long theTime2 = end2- start2;
//		
//	
////		
//		if (s.getLength() < 100) {
//			System.out.println("Time for sort on " + s.getSortName() + " on " +
//					s.getLength() + " numbers is: " + theTime2+ 
//					" (nano)seconds");
//			
//		} else {
//			System.out.println("Time for Selection sort on " + s.getLength() + " numbers is: " + (double)(theTime/1000)+ 
//					"seconds");
//		}
//		
//		//System.out.println(sSort);
//		
//		
//
//	}
//	
//		
//	
//	public static int [ ] getRandom (int n) {
//		int [ ] nList = new int [n];
//		
//		for(int i=0; i< nList.length; i++ ) {
//			nList[i] = (int)(Math.random()* 1000);
//		}
//			
//		
//		return nList;
//	}
//	
//	public static int [] getDescendingOrder(int n){
//		
//		int[] nList = new int[n];
//		
//		for(int i=0; i< nList.length; i++ ) {
//			nList[i] = nList.length-i;
//		}
//		
//		return nList;
//		
//	}
//	
//public static int [] getAscendingOrder(int n){
//		
//		int[] nList = new int[n];
//		
//		for(int i= nList.length; i > 0; i-- ) {
//			nList[nList.length-1] = i;
//		}
//		
//		return nList;
//		
//	}
//
//}
